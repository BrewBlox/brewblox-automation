{
  "description": "The runtime configuration and history for process execution.\nA template is copied into a process.\nFurther changes to the template will not change a running process.",
  "type": "object",
  "properties": {
    "results": {
      "description": "All execution results from this process.\nThe last result is considered current.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AutomationStepResult"
      }
    },
    "title": {
      "description": "Human-readable name.",
      "type": "string"
    },
    "steps": {
      "description": "Step objects.\nThe process always starts at the first step.\nBy default, steps are visited in listed order.\nTransitions may override this behavior.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AutomationStep"
      }
    },
    "id": {
      "pattern": "^[0-9a-fA-F\\-]{36}$",
      "type": "string"
    },
    "_rev": {
      "description": "Is defined by the datastore when object is first created.\nObjects with a _rev can't be created.\nObjects without a _rev can't be saved or removed.",
      "type": "string"
    }
  },
  "required": [
    "id",
    "results",
    "steps",
    "title"
  ],
  "definitions": {
    "AutomationStepResult": {
      "description": "A single result from process execution.\nThese are treated as immutable: if the process advances, a new result is added.\nThe last result is treated as current.",
      "type": "object",
      "properties": {
        "id": {
          "pattern": "^[0-9a-fA-F\\-]{36}$",
          "type": "string"
        },
        "stepId": {
          "description": "The unique ID for the relevant step.\nIs null if the result does not apply to any single step.",
          "type": [
            "string",
            "null"
          ]
        },
        "date": {
          "description": "Date when the result was generated.",
          "type": [
            "number",
            "null"
          ]
        },
        "stepStatus": {
          "$ref": "#/definitions/AutomationStatus",
          "description": "Current status for the relevant step.\nWill be Invalid if stepId is null."
        },
        "processStatus": {
          "$ref": "#/definitions/AutomationStatus",
          "description": "Current status for the entire process.\nThe process will only be evaluated if it is Active."
        }
      },
      "required": [
        "date",
        "id",
        "processStatus",
        "stepId",
        "stepStatus"
      ]
    },
    "AutomationStatus": {
      "description": "Generic status type for Automation types.\nIt is used by multiple types.",
      "enum": [
        "Active",
        "Cancelled",
        "Created",
        "Finished",
        "Invalid",
        "Paused",
        "Retrying"
      ],
      "type": "string"
    },
    "AutomationStep": {
      "description": "The static definition for process functionality.\nFirst, actions are applied.\nThen, transitions are checked until one evaluates truthy.\n\nSteps are not changed during a process, and may be visited multiple times.",
      "type": "object",
      "properties": {
        "id": {
          "pattern": "^[0-9a-fA-F\\-]{36}$",
          "type": "string"
        },
        "title": {
          "description": "Human-readable name.",
          "type": "string"
        },
        "preconditions": {
          "description": "Preconditions must evaluate true before actions are applied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationCondition<ConditionImpl>"
          }
        },
        "actions": {
          "description": "Actions are applied in order.\nIf any action fails, all are retried.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationAction<ActionImpl>"
          }
        },
        "transitions": {
          "description": "Transitions are checked in order.\nThe first transition to evaluate true gets to pick the next step.\nIf no transitions are set, the process immediates continues to the next step.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationTransition"
          }
        }
      },
      "required": [
        "actions",
        "id",
        "preconditions",
        "title",
        "transitions"
      ]
    },
    "AutomationCondition<ConditionImpl>": {
      "description": "Common fields for all items.\nimpl is any of the action / condition Impl types.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "impl": {
          "anyOf": [
            {
              "$ref": "#/definitions/TimeAbsoluteImpl"
            },
            {
              "$ref": "#/definitions/TimeElapsedImpl"
            },
            {
              "$ref": "#/definitions/BlockValueImpl"
            },
            {
              "$ref": "#/definitions/TaskStatusImpl"
            },
            {
              "$ref": "#/definitions/AlwaysFalseImpl"
            }
          ]
        }
      },
      "required": [
        "enabled",
        "id",
        "impl",
        "title"
      ]
    },
    "TimeAbsoluteImpl": {
      "description": "Waits until current time is later than desired.\nEvaluate: now() > time.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TimeAbsolute"
          ]
        },
        "time": {
          "description": "Desired time.",
          "type": [
            "number",
            "null"
          ]
        }
      },
      "required": [
        "time",
        "type"
      ]
    },
    "TimeElapsedImpl": {
      "description": "Waits until enough time has elapsed since start point.\nEvaluate: now() > start + duration.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TimeElapsed"
          ]
        },
        "start": {
          "description": "Used start point.",
          "enum": [
            "Process",
            "Step"
          ],
          "type": "string"
        },
        "duration": {
          "description": "In milliseconds.",
          "type": "number"
        }
      },
      "required": [
        "duration",
        "start",
        "type"
      ]
    },
    "BlockValueImpl": {
      "description": "A specific field in block.data must compare truthy.\nEvaluate: block.data[key] OPERATOR value",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "BlockValue"
          ]
        },
        "serviceId": {
          "description": "Part of the unique identifier for a block.",
          "type": [
            "string",
            "null"
          ]
        },
        "blockId": {
          "description": "Part of the unique identifier for a block.",
          "type": [
            "string",
            "null"
          ]
        },
        "blockType": {
          "description": "Helps rendering and choosing blocks.\nCan either be a direct type, or an interface type.",
          "type": [
            "string",
            "null"
          ]
        },
        "key": {
          "description": "Key of a top-level object within block.data.",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "Compared value.",
          "type": "null"
        },
        "operator": {
          "description": "Comparison approach.\nThe left-hand value is current value (block.data[key]).\nThe right-hand value is the condition value.",
          "enum": [
            "eq",
            "ge",
            "gt",
            "le",
            "lt",
            "ne"
          ],
          "type": "string"
        }
      },
      "required": [
        "blockId",
        "blockType",
        "key",
        "operator",
        "serviceId",
        "type",
        "value"
      ]
    },
    "TaskStatusImpl": {
      "description": "Compare status of matching tasks with given status.\nEvaluate: validTasks.all(task => task.status === status)",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TaskStatus"
          ]
        },
        "ref": {
          "description": "The user-defined reference key.\nMust match those set in TaskCreate.\nIf multiple tasks share the same ref key,\nall must match the given status.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/AutomationStatus",
          "description": "Desired status."
        }
      },
      "required": [
        "ref",
        "status",
        "type"
      ]
    },
    "AlwaysFalseImpl": {
      "description": "Enforces a stop in step execution that must be manually overridden.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AlwaysFalse"
          ]
        },
        "desc": {
          "description": "Human-readable description.",
          "type": "string"
        }
      },
      "required": [
        "desc",
        "type"
      ]
    },
    "AutomationAction<ActionImpl>": {
      "description": "Common fields for all items.\nimpl is any of the action / condition Impl types.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "impl": {
          "anyOf": [
            {
              "$ref": "#/definitions/BlockPatchImpl"
            },
            {
              "$ref": "#/definitions/TaskCreateImpl"
            }
          ]
        }
      },
      "required": [
        "enabled",
        "id",
        "impl",
        "title"
      ]
    },
    "BlockPatchImpl": {
      "description": "Update block.data with given object.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "BlockPatch"
          ]
        },
        "serviceId": {
          "description": "Part of the unique identifier for a block.",
          "type": [
            "string",
            "null"
          ]
        },
        "blockId": {
          "description": "Part of the unique identifier for a block.",
          "type": [
            "string",
            "null"
          ]
        },
        "blockType": {
          "description": "Helps rendering and choosing blocks.\nCan either be a direct type, or an interface type.",
          "type": [
            "string",
            "null"
          ]
        },
        "data": {
          "anyOf": [
            {
              "description": "Data to be merged into the existing block.data object.",
              "type": "object",
              "properties": {},
              "additionalProperties": true
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "blockId",
        "blockType",
        "data",
        "serviceId",
        "type"
      ]
    },
    "TaskCreateImpl": {
      "description": "Create a new Task.\nStatus can be checked later with the TaskStatusImpl condition.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TaskCreate"
          ]
        },
        "ref": {
          "description": "User-defined reference key.\nNot guaranteed to be unique.",
          "type": "string"
        },
        "title": {
          "description": "Human readable title for the created task.",
          "type": "string"
        },
        "message": {
          "description": "Message for the created task.",
          "type": "string"
        }
      },
      "required": [
        "message",
        "ref",
        "title",
        "type"
      ]
    },
    "AutomationTransition": {
      "description": "Object defining how a process can move from one step to another.\nCombining transitions allows for branching and while() behavior.",
      "type": "object",
      "properties": {
        "id": {
          "pattern": "^[0-9a-fA-F\\-]{36}$",
          "type": "string"
        },
        "next": {
          "description": "true: next step\nfalse: exit process\nstring: step ID",
          "type": [
            "string",
            "boolean"
          ]
        },
        "enabled": {
          "description": "A transition must be enabled for it to be evaluated.",
          "type": "boolean"
        },
        "conditions": {
          "description": "All conditions in a transition must evaluate true.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationCondition<ConditionImpl>"
          }
        }
      },
      "required": [
        "conditions",
        "enabled",
        "id",
        "next"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}